import{r as c,j as L}from"./framer-motion-B8PGm2dx.js";const S=({particleCount:b=100,particleColor:M="rgba(255, 255, 255, 0.5)",particleSize:v=2,animationSpeed:z=1,className:E="",useOffscreenCanvas:w=!0,pauseWhenHidden:y=!0})=>{const p=c.useRef(null),P=c.useRef(null),d=c.useRef(null),T=c.useRef([]),m=c.useRef(null),k=c.useRef(0),[f,A]=c.useState(!0),l=c.useMemo(()=>({count:b,color:M,size:v,speed:z}),[b,M,v,z]);c.useEffect(()=>{if(!y)return;const e=p.current;if(!e)return;const n=new IntersectionObserver(r=>{const i=r[0];A(i.isIntersecting)},{threshold:.1,rootMargin:"50px"});return n.observe(e),()=>{n.disconnect()}},[y]);const q=c.useCallback((e,n)=>{m.current&&clearTimeout(m.current),m.current=setTimeout(()=>{const r=Math.min(window.devicePixelRatio,2),i=e.getBoundingClientRect(),h=i.width*r,o=i.height*r;e.width=h,e.height=o,e.style.width=i.width+"px",e.style.height=i.height+"px",n&&(n.width=h,n.height=o)},150)},[]),g=c.useCallback((e,n,r)=>{if(y&&!f){d.current=requestAnimationFrame(()=>g(e,n,r));return}const i=performance.now(),h=f?16.67:33.33;if(i-k.current<h){d.current=requestAnimationFrame(()=>g(e,n,r));return}k.current=i;const o=T.current,s=n||e,u=()=>{s.clearRect(0,0,r.width,r.height);for(let a=0;a<o.length;a++){const t=o[a];if(t.x+=t.vx,t.y+=t.vy,(t.x<=0||t.x>=r.width)&&(t.vx=-t.vx,t.x=Math.max(0,Math.min(r.width,t.x))),(t.y<=0||t.y>=r.height)&&(t.vy=-t.vy,t.y=Math.max(0,Math.min(r.height,t.y))),s.beginPath(),s.arc(t.x,t.y,t.size,0,Math.PI*2),s.fillStyle=l.color.replace("0.5",t.alpha),s.fill(),f&&a<o.length-5)for(let R=a+1;R<Math.min(a+6,o.length);R++){const x=o[R],F=t.x-x.x,I=t.y-x.y,C=F*F+I*I;if(C<1e4){const j=Math.sqrt(C);s.beginPath(),s.moveTo(t.x,t.y),s.lineTo(x.x,x.y),s.strokeStyle=l.color.replace("0.5",(1-j/100)*.2),s.lineWidth=1,s.stroke()}}}n&&w&&(e.clearRect(0,0,r.width,r.height),e.drawImage(P.current,0,0)),d.current=requestAnimationFrame(()=>g(e,n,r))};"requestIdleCallback"in window&&!f?requestIdleCallback(u,{timeout:50}):u()},[l,w,f,y]);return c.useEffect(()=>{const e=p.current;if(!e)return;const n=e.getContext("2d",{alpha:!0,desynchronized:!0}),r=T.current;let i=null,h=null;if(w&&"OffscreenCanvas"in window)try{i=new OffscreenCanvas(e.width,e.height),h=i.getContext("2d"),P.current=i}catch{console.warn("OffscreenCanvas not supported, falling back to regular canvas")}const o=()=>{q(e,i)};return o(),window.addEventListener("resize",o,{passive:!0}),(()=>{r.length=0;const u=new Array(l.count);for(let a=0;a<l.count;a++)u[a]={x:Math.random()*e.width,y:Math.random()*e.height,vx:(Math.random()-.5)*l.speed,vy:(Math.random()-.5)*l.speed,alpha:Math.random()*.5+.2,size:Math.random()*l.size+1};r.push(...u)})(),g(n,h,e),()=>{window.removeEventListener("resize",o),d.current&&cancelAnimationFrame(d.current),m.current&&clearTimeout(m.current)}},[l,q,g,w]),L.jsx("canvas",{ref:p,className:`absolute inset-0 pointer-events-none ${E}`,style:{width:"100%",height:"100%",willChange:"auto"}})};export{S as default};
